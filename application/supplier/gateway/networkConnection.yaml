---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "nck-network"

#
# Any properties with an "x-" prefix will be treated as application-specific, exactly like how naming
# in HTTP headers or swagger properties work. The SDK will simply ignore these fields and leave
# them for the applications to process. This is a mechanism for different components of an application
# to exchange information that are not part of the standard schema described below. In particular,
# the "x-type" property with the "hlfv1" value example below is used by Hyperledger Composer to
# determine the type of Fabric networks (v0.6 vs. v1.0) it needs to work with.
#
x-type: "hlfv1"

#
# Describe what the target network is/does.
#
description: "The nck network"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

client:
  organization: Supplier

channels:
  # name of the channel
  nckchannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer.nck.com

    # Required. list of peers from participating orgs
    peers:
      peer0.supplier.nck.com:
      peer1.supplier.nck.com:

#
# list of participating organizations in this network
#
organizations:
  Warehouse:
    mspid: WarehouseMSP

    peers:
      - peer0.warehouse.nck.com
      - peer1.warehouse.nck.com

  Supplier:
    mspid: SupplierMSP

    peers:
      - peer0.supplier.nck.com
      - peer1.supplier.nck.com

  Issuer:
    mspid: IssuerMSP

    peers:
      - peer0.issuer.nck.com
      - peer1.issuer.nck.com
#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer.nck.com:
    url: grpc://localhost:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.nck.com

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0.warehouse.nck.com:
    # this URL is used to send endorsement and query requests
    url: grpc://localhost:7051

    grpcOptions:
      ssl-target-name-override: peer0.warehouse.nck.com
      request-timeout: 120001
      
  peer1.warehouse.nck.com:
    # this URL is used to send endorsement and query requests
    url: grpc://localhost:8051

    grpcOptions:
      ssl-target-name-override: peer1.warehouse.nck.com
      request-timeout: 120001

  peer0.issuer.nck.com:
    # this URL is used to send endorsement and query requests
    url: grpc://localhost:10151

    grpcOptions:
      ssl-target-name-override: peer0.issuer.nck.com
      request-timeout: 120001

  peer1.issuer.nck.com:
    # this URL is used to send endorsement and query requests
    url: grpc://localhost:10251

    grpcOptions:
      ssl-target-name-override: peer1.issuer.nck.com
      request-timeout: 120001

  peer0.supplier.nck.com:
    # this URL is used to send endorsement and query requests
    url: grpc://localhost:9051

    grpcOptions:
      ssl-target-name-override: peer0.supplier.nck.com
      request-timeout: 120001

  peer1.supplier.nck.com:
    # this URL is used to send endorsement and query requests
    url: grpc://localhost:10051

    grpcOptions:
      ssl-target-name-override: peer1.supplier.nck.com
      request-timeout: 120001


# Fabric-CA is a special kind of Certificate Authority provided by Hyperledger Fabric which allows
# certificate management to be done via REST APIs. Application may choose to use a standard
# Certificate Authority instead of Fabric-CA, in which case this section would not be specified.
#
certificateAuthorities:
  ca-warehouse:
    url: http://localhost:7054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw

  ca-issuer:
    url: http://localhost:9054
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw

  ca-supplier:
    url: http://localhost:10154
    # the properties specified under this object are passed to the 'http' client verbatim when
    # making the request to the Fabric-CA server
    httpOptions:
      verify: false

    # Fabric-CA supports dynamic user enrollment via REST APIs. A "root" user, a.k.a registrar, is
    # needed to enroll and invoke new users.
    registrar:
      - enrollId: admin
        enrollSecret: adminpw

